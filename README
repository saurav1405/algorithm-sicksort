# MSB-Based Bitwise Radix Sort (with Windowing)
This sorting algorithm leverages the binary representation of 32-bit unsigned integers to sort an array in linear time complexity per bit. The core idea is to sort the array bit by bit, starting from the most significant bit (MSB) to the least significant bit (LSB), i.e., from bit position 32 down to 1.

At each bit position k, the array is partitioned into windows—subarrays—based on previous bit-level divisions. Initially, the entire array is considered a single window. For each window, the elements are stably sorted based on the k-th bit (1-indexed from the MSB). This step effectively performs a stable binary radix sort over the bits.

For every sorting operation at a bit position k, the partition index (where elements with bit 0 end and bit 1 begin) is recorded. These indices define new sub-windows for the next iteration (bit k-1), ensuring previous sort orders are preserved.

A window is a contiguous subarray (range of consecutive indices) within the array. At every bit position k, the array is partitioned into one or more non-overlapping windows. The array maintains sorted order by higher (more significant) bits.
We sort only within each window, so that previously sorted bits are preserved and stability is maintained.
 Why Can We Sort Only Within Windows?
When sorting at a given bit position k, the sort must preserve the ordering established by previous (more significant) bits.

Since elements in different windows already differ in more significant bits, their relative positions should not be changed.

Therefore, we only sort within each window — the boundaries between windows are determined by earlier bit partitions.

Each sort step for a window uses a binary partitioning logic:
Traverse the window.
Move all elements with 0 in the k-th bit to the front.
Return the index p, which is the first index where a 1 appears at bit position k.



High-Level Steps:
Initialize a linked list of window boundaries with [0, n].

For each bit index from 32 down to 1:

For every window defined by consecutive nodes in the list:

Partition elements in that window based on the current bit.

Record the partition index if both 0 and 1 values are present.

Update the window list with this new boundary.

The array becomes fully sorted after processing all 32 bits.



Pseudocode
Function IterativeMSBRadixSort(arr: array of unsigned 32-bit integers):
    n = length(arr)
    windowList = new LinkedList()
    windowList.append(0)
    windowList.append(n)

    For bitIndex from 32 down to 1:
        node = windowList.head

        While node and node.next:
            start = node.value
            end = node.next.value - 1

            partitionIndex = PartitionByBit(arr, start, end, bitIndex)

            // Only insert new window if both 0s and 1s exist in this window
            If start <= partitionIndex <= end:
                node.insertAfter(partitionIndex)

            node = node.next.next if node.next else null


Function PartitionByBit(arr: array, start: int, end: int, bitIndex: int) -> int:
    p = start - 1
    For i from start to end:
        bitVal = GetBit(arr[i], bitIndex)
        If bitVal == 0:
            p = p + 1
            Swap arr[i], arr[p]
    Return p + 1


Function GetBit(number: int, bitIndex: int) -> int:
    // Bit positions are 1-based from MSB to LSB (32 to 1)
    Return (number >> (32 - bitIndex)) & 1


Class ListNode:
    value: int
    next: ListNode

    Method insertAfter(val: int):
        newNode = new ListNode(val)
        newNode.next = this.next
        this.next = newNode


Class LinkedList:
    head: ListNode

    Method append(val: int):
        if head is null:
            head = new ListNode(val)
        else:
            node = head
            while node.next:
                node = node.next
            node.next = new ListNode(val)


Why This Works:
Bitwise partitioning from MSB to LSB ensures correct order.

Windows are consecutive and non-overlapping, so we avoid mixing elements that differ in more significant bits.

Sorting within each window maintains previous orderings, providing a stable and correct sort.

Time complexity remains O(n) due to a constant number (32) of passes.

Time Complexity : O(n) for 32-bit integers
Space Complexity : O(n) for window list
In-Place : Yes
Stable  Yes



Recursive MSB Radix Sort (Bitwise Partition Sort)
Description:
This is a recursive version of the MSB-first radix sort for sorting unsigned 32-bit integers. It works by recursively partitioning the input array (or subarray) based on the bit values at each position, starting from the most significant bit (bit 32) down to the least significant bit (bit 1).

At each level of recursion:

A given subarray is partitioned into two parts:

Left: all elements with 0 at the current bit.

Right: all elements with 1 at the current bit.

This partitioning is done in linear time.

Then the function recursively sorts the two subarrays using the next lower bit.

The recursion ends when:

The subarray size is 0 or 1 (already sorted), or

The bit index goes below 1 (no more bits to process).

This approach maintains the stability and achieves O(n) time complexity for fixed-size integers.

High-Level Steps:
Define a recursive function MSBRadixSort(arr, start, end, bitIndex).

If start >= end or bitIndex < 1, return.

Partition the subarray arr[start...end] by the value of the bitIndex-th bit.

Recursively sort the two halves:

Left half: elements with 0 at bitIndex.

Right half: elements with 1 at bitIndex.

Recurse with bitIndex - 1.

Function RecursiveMSBRadixSort(arr: array of unsigned 32-bit integers):
    MSBRadixSort(arr, 0, length(arr) - 1, 32)


Function MSBRadixSort(arr: array, start: int, end: int, bitIndex: int):
    If start >= end or bitIndex < 1:
        return

    mid = PartitionByBit(arr, start, end, bitIndex)

    // Recursively sort the 0-bit group and 1-bit group
    MSBRadixSort(arr, start, mid - 1, bitIndex - 1)
    MSBRadixSort(arr, mid, end, bitIndex - 1)


Function PartitionByBit(arr: array, start: int, end: int, bitIndex: int) -> int:
    p = start - 1
    For i from start to end:
        bitVal = GetBit(arr[i], bitIndex)
        If bitVal == 0:
            p = p + 1
            Swap arr[i], arr[p]
    Return p + 1


Function GetBit(number: int, bitIndex: int) -> int:
    // Get the bit value at bitIndex (1 = MSB, 32 = LSB)
    Return (number >> (32 - bitIndex)) & 1


Summary
Time Complexity : O(n) (32 linear passes)
Space Complexity : O(log n) recursion stack (worst case)
Stable : Yes
In-place : Yes
Best for : Large arrays of integers with uniform bit width
